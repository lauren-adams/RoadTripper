# Set default image to podman, for docker builds.  
# We have to use this because for some reason the official docker image does not work.
image: quay.io/podman/stable

stages:
  - "build"
  - "deploy"
  - "test"
# This builds an image of the api, and pushes it to the docker repository.
build-api: 
  stage: build
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[BUILD-API]/
      when: always
    - if: $CI_COMMIT_MESSAGE =~ /\[NOTHING]/
      when: never
  script:
  
    # This set of instructions simply navigates to the road-trip-api and
    # road-trip-frontend folders and builds a docker image based on the
    # docker files it finds there. This assumes there is a file named
    # "Dockerfile" in each directory.
    - cd road-trip-api
    - ls
    - curl https://github.com/a8m/envsubst/releases/download/v1.2.0/envsubst-Linux-x86_64 > envsubst
    - chmod +x envsubst
    - cp src/main/java/road/trip/api/Email.java emailTemp
    - ./envsubst < emailTemp > src/main/java/road/trip/api/Email.java
    - cp src/main/resources/application.properties application
    - ./envsubst < application > src/main/resources/application.properties
    - chmod +x gradlew
    - podman build -t road-trip-api .
    - podman tag road-trip-api docker.io/kaase/road-trip-api:latest
    - echo $DOCKERUSER
    - echo $DOCKERKEY
    - podman login -u $DOCKERUSER -p $DOCKERKEY docker.io
    - podman push kaase/road-trip-api:latest

# This builds an image of the frontend, and pushes it to the docker repository.
build-frontend:
  stage: build
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[NOTHING]/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[BUILD-FRONTEND]/
      when: always
     
  script:
    # This set of instructions simply navigates to the road-trip-api and
    # road-trip-frontend folders and builds a docker image based on the
    # docker files it finds there. This assumes there is a file named
    # "Dockerfile" in each directory.
    - cd road-trip-frontend
    - podman build -t road-trip-frontend .
    - podman tag road-trip-frontend docker.io/kaase/road-trip-frontend:latest
    - podman login -u $DOCKERUSER -p $DOCKERKEY docker.io
    - podman push kaase/road-trip-frontend:latest

# This deploys the built frontend image to the Kubernetes repository.
deploy-frontend:
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  stage: deploy
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[NOTHING]/
      when: never
    - when: always
  script:
    - echo $KUBECONFIG64 | base64 --decode > $KUBECONFIG
    - kubectl config set-context --current --namespace=gitlab-agent
    - cd kubernetes
    - cd road-trip-api
    - kubectl delete -f road-trip-api-deployment.yaml
    - kubectl delete -f road-trip-api-service.yaml
    - kubectl apply -f road-trip-api-deployment.yaml
    - kubectl apply -f road-trip-api-service.yaml

# This deploys the built api image to the Kubernetes repository.
deploy-db:
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  stage: deploy
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[DEPLOY-DB]/
      when: always
    - if: $CI_COMMIT_MESSAGE =~ /\[NOTHING]/
      when: never
  script:
    - echo $KUBECONFIG64 | base64 --decode > $KUBECONFIG
    - kubectl config set-context --current --namespace=gitlab-agent
    - cd kubernetes
    - kubectl apply -f mysql.yaml

# This deploys the built api image to the Kubernetes repository.
deploy-api:
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  stage: deploy
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[NOTHING]/
      when: never
    - when: always
  script:
    - echo $KUBECONFIG64 | base64 --decode > $KUBECONFIG
    - kubectl config set-context --current --namespace=gitlab-agent
    - cd kubernetes
    - cd road-trip-frontend
    - kubectl delete -f road-trip-frontend-deployment.yaml
    - kubectl delete -f road-trip-frontend-service.yaml
    - kubectl apply -f road-trip-frontend-deployment.yaml
    - kubectl apply -f road-trip-frontend-service.yaml
deploy-nginx:
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  stage: deploy
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[NOTHING]/
      when: never
    - when: always
  script:
    - echo $KUBECONFIG64 | base64 --decode > $KUBECONFIG
    - kubectl config set-context --current --namespace=gitlab-agent
    - cd kubernetes
    - kubectl apply -f nginx.yaml

# This deploys the ingress controller, which regulates traffic to each service.
deploy-ingress:
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  stage: deploy
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[NOTHING]/
      when: never
    - when: always
  script:
    - echo $KUBECONFIG64 | base64 --decode > $KUBECONFIG
    - kubectl config set-context --current --namespace=gitlab-agent
    - cd kubernetes
    - kubectl apply -f ingress-controller.yaml

test-api:
  stage: test
  script:
    - curl -k https://subjecttochange.dev/api/ping

test-frontend:
  stage: test
  script:
    - curl -k https://subjecttochange.dev/home
